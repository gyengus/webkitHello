var detectPlatform, normalizePlatform, os, platforms, _;

os = require('os');

_ = require('lodash');

platforms = {
  darwin: function() {
    return 'osx';
  },
  win: function() {
    return 'win';
  },
  win32: function() {
    return 'win';
  },
  win64: function() {
    return 'win';
  },
  linux: function() {
    return 'linux' + (process.arch === 'ia32' ? 32 : 64);
  }
};

detectPlatform = function() {
  return platforms[os.platform()]();
};

normalizePlatform = function(platform) {
  if (platforms[platform] != null) {
    return platforms[platform]();
  } else {
    return platform;
  }
};

module.exports = function(args, cb) {
  var err, objectMode, options, platform, result;
  if (cb == null) {
    cb = (function() {});
  }
  platform = args.platform ? normalizePlatform(args.platform) : detectPlatform();
  objectMode = _.isPlainObject(args.options);
  try {
    options = objectMode ? args.options : JSON.parse(args.options);
  } catch (_error) {
    err = _error;
    return cb(err, null);
  }
  if (options.platformOverrides != null) {
    result = _.clone(options, true);
    if ((options.platformOverrides[platform] != null) && Object.keys(options.platformOverrides[platform]).length) {
      result = _.merge(result, options.platformOverrides[platform], function(optionValue, overrideValue) {

        /*
          If overrides.x is {} but source.x is a non-empty object {prop:0, another:2},
          take the {}}
         */
        if ((_.isPlainObject(overrideValue) || _.isArray(overrideValue)) && _.isEmpty(overrideValue)) {
          return overrideValue;
        }
      });
    }
    delete result.platformOverrides;
    return cb(null, objectMode ? result : JSON.stringify(result));
  } else {
    return cb(null, args.options);
  }
};
